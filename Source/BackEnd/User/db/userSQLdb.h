// generated by /FJW/BookFlavor/Build/vcpkg_installed/x64-linux/scripts/sqlpp11-ddl2cpp userService.sql ./userSQLdb UserSQLdb
#ifndef USERSQLDB_USERSQLDB_H
#define USERSQLDB_USERSQLDB_H

#include <sqlpp11/char_sequence.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/table.h>

#include <map>
#include <string>
namespace UserSQLdb {
    enum class Province {
        Anhui,
        Beijing,
        Chongqing,
        Fujian,
        Gansu,
        Guangdong,
        Guangxi,
        Guizhou,
        Hainan,
        Hebei,
        Heilongjiang,
        Henan,
        Hubei,
        Hunan,
        InnerMongolia,
        Jiangsu,
        Jiangxi,
        Jilin,
        Liaoning,
        Ningxia,
        Qinghai,
        Shaanxi,
        Shandong,
        Shanghai,
        Shanxi,
        Sichuan,
        Tianjin,
        Tibet,
        Xinjiang,
        Yunnan,
        Zhejiang,
        HongKong,
        Macau,
        Unknown
    };

    inline std::map<std::string, Province> provinceMap = {
        {"安徽", Province::Anhui},          {"北京", Province::Beijing},  {"重庆", Province::Chongqing}, {"福建", Province::Fujian},   {"甘肃", Province::Gansu},
        {"广东", Province::Guangdong},      {"广西", Province::Guangxi},  {"贵州", Province::Guizhou},   {"海南", Province::Hainan},   {"河北", Province::Hebei},
        {"黑龙江", Province::Heilongjiang}, {"河南", Province::Henan},    {"湖北", Province::Hubei},     {"湖南", Province::Hunan},    {"内蒙古", Province::InnerMongolia},
        {"江苏", Province::Jiangsu},        {"江西", Province::Jiangxi},  {"吉林", Province::Jilin},     {"辽宁", Province::Liaoning}, {"宁夏", Province::Ningxia},
        {"青海", Province::Qinghai},        {"陕西", Province::Shaanxi},  {"山东", Province::Shandong},  {"上海", Province::Shanghai}, {"山西", Province::Shanxi},
        {"四川", Province::Sichuan},        {"天津", Province::Tianjin},  {"西藏", Province::Tibet},     {"新疆", Province::Xinjiang}, {"云南", Province::Yunnan},
        {"浙江", Province::Zhejiang},       {"香港", Province::HongKong}, {"澳门", Province::Macau}};

    inline Province stringToProvince(const std::string& provinceName) {
        auto it = provinceMap.find(provinceName);
        if (it != provinceMap.end()) {
            return it->second;
        } else {
            return Province::Unknown;
        }
    }

    enum class Carrier { CUCC, CTCC, CTCC_v, CUCC_v, CMCC_v, CBCC, CBCC_v };
    namespace UserRegister_ {
        struct Id {
            struct _alias_t {
                static constexpr const char _literal[] = "id";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T id;
                    T& operator()() { return id; }
                    const T& operator()() const { return id; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
        };
        struct Name {
            struct _alias_t {
                static constexpr const char _literal[] = "name";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T name;
                    T& operator()() { return name; }
                    const T& operator()() const { return name; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Password {
            struct _alias_t {
                static constexpr const char _literal[] = "password";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T password;
                    T& operator()() { return password; }
                    const T& operator()() const { return password; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhoneNumber {
            struct _alias_t {
                static constexpr const char _literal[] = "phone_number";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phoneNumber;
                    T& operator()() { return phoneNumber; }
                    const T& operator()() const { return phoneNumber; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Province {
            struct _alias_t {
                static constexpr const char _literal[] = "province";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T province;
                    T& operator()() { return province; }
                    const T& operator()() const { return province; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct RegionCode {
            struct _alias_t {
                static constexpr const char _literal[] = "region_code";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T regionCode;
                    T& operator()() { return regionCode; }
                    const T& operator()() const { return regionCode; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberType {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_type";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberType;
                    T& operator()() { return phonenumberType; }
                    const T& operator()() const { return phonenumberType; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Zip {
            struct _alias_t {
                static constexpr const char _literal[] = "zip";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T zip;
                    T& operator()() { return zip; }
                    const T& operator()() const { return zip; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct City {
            struct _alias_t {
                static constexpr const char _literal[] = "city";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T city;
                    T& operator()() { return city; }
                    const T& operator()() const { return city; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Carrier {
            struct _alias_t {
                static constexpr const char _literal[] = "carrier";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T carrier;
                    T& operator()() { return carrier; }
                    const T& operator()() const { return carrier; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct AreaCode {
            struct _alias_t {
                static constexpr const char _literal[] = "area_code";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T areaCode;
                    T& operator()() { return areaCode; }
                    const T& operator()() const { return areaCode; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
    }  // namespace UserRegister_

    struct UserRegister : sqlpp::table_t<UserRegister, UserRegister_::Id, UserRegister_::Name, UserRegister_::Password, UserRegister_::PhoneNumber, UserRegister_::Province, UserRegister_::RegionCode,
                                         UserRegister_::PhonenumberType, UserRegister_::Zip, UserRegister_::City, UserRegister_::Carrier, UserRegister_::AreaCode> {
        struct _alias_t {
            static constexpr const char _literal[] = "user_register";
            using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t {
                T userRegister;
                T& operator()() { return userRegister; }
                const T& operator()() const { return userRegister; }
            };
        };
    };
}  // namespace UserSQLdb
#endif
