// generated by /FJW/BookFlavor/Build/vcpkg_installed/x64-linux/scripts/sqlpp11-ddl2cpp userService.sql ./userSQLdb UserSQLdb
#ifndef USERSQLDB_USERSQLDB_H
#define USERSQLDB_USERSQLDB_H

#include <sqlpp11/char_sequence.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/table.h>

namespace UserSQLdb {
    namespace UserRegister_ {
        struct Id {
            struct _alias_t {
                static constexpr const char _literal[] = "id";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T id;
                    T& operator()() { return id; }
                    const T& operator()() const { return id; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
        };
        struct Name {
            struct _alias_t {
                static constexpr const char _literal[] = "name";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T name;
                    T& operator()() { return name; }
                    const T& operator()() const { return name; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Password {
            struct _alias_t {
                static constexpr const char _literal[] = "password";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T password;
                    T& operator()() { return password; }
                    const T& operator()() const { return password; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Country {
            struct _alias_t {
                static constexpr const char _literal[] = "country";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T country;
                    T& operator()() { return country; }
                    const T& operator()() const { return country; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberCode {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_code";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberCode;
                    T& operator()() { return phonenumberCode; }
                    const T& operator()() const { return phonenumberCode; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberProvince {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_province";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberProvince;
                    T& operator()() { return phonenumberProvince; }
                    const T& operator()() const { return phonenumberProvince; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberRegionCode {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_region_code";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberRegionCode;
                    T& operator()() { return phonenumberRegionCode; }
                    const T& operator()() const { return phonenumberRegionCode; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberType {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_type";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberType;
                    T& operator()() { return phonenumberType; }
                    const T& operator()() const { return phonenumberType; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberZip {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_zip";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberZip;
                    T& operator()() { return phonenumberZip; }
                    const T& operator()() const { return phonenumberZip; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberCity {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_city";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberCity;
                    T& operator()() { return phonenumberCity; }
                    const T& operator()() const { return phonenumberCity; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberCarrier {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_carrier";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberCarrier;
                    T& operator()() { return phonenumberCarrier; }
                    const T& operator()() const { return phonenumberCarrier; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct PhonenumberAreaCode {
            struct _alias_t {
                static constexpr const char _literal[] = "phonenumber_area_code";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T phonenumberAreaCode;
                    T& operator()() { return phonenumberAreaCode; }
                    const T& operator()() const { return phonenumberAreaCode; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct EmailAddress {
            struct _alias_t {
                static constexpr const char _literal[] = "email_address";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T emailAddress;
                    T& operator()() { return emailAddress; }
                    const T& operator()() const { return emailAddress; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct EmailDomain {
            struct _alias_t {
                static constexpr const char _literal[] = "email_domain";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template <typename T>
                struct _member_t {
                    T emailDomain;
                    T& operator()() { return emailDomain; }
                    const T& operator()() const { return emailDomain; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
    }  // namespace UserRegister_

    struct UserRegister
        : sqlpp::table_t<UserRegister, UserRegister_::Id, UserRegister_::Name, UserRegister_::Password, UserRegister_::Country, UserRegister_::PhonenumberCode, UserRegister_::PhonenumberProvince,
                         UserRegister_::PhonenumberRegionCode, UserRegister_::PhonenumberType, UserRegister_::PhonenumberZip, UserRegister_::PhonenumberCity, UserRegister_::PhonenumberCarrier,
                         UserRegister_::PhonenumberAreaCode, UserRegister_::EmailAddress, UserRegister_::EmailDomain> {
        struct _alias_t {
            static constexpr const char _literal[] = "user_register";
            using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template <typename T>
            struct _member_t {
                T userRegister;
                T& operator()() { return userRegister; }
                const T& operator()() const { return userRegister; }
            };
        };
    };
}  // namespace UserSQLdb
#endif
