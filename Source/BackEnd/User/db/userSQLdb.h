// generated by /FJW/BookFlavor/Build/vcpkg_installed/x64-linux/scripts/sqlpp11-ddl2cpp userService.sql ./userSQLdb UserSQLdb
#ifndef USERSQLDB_USERSQLDB_H
#define USERSQLDB_USERSQLDB_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace UserSQLdb
{
  namespace UserRegister_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PhoneNumber
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phoneNumber;
            T& operator()() { return phoneNumber; }
            const T& operator()() const { return phoneNumber; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace UserRegister_

  struct UserRegister: sqlpp::table_t<UserRegister,
               UserRegister_::Id,
               UserRegister_::Name,
               UserRegister_::Password,
               UserRegister_::PhoneNumber>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "user_register";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T userRegister;
        T& operator()() { return userRegister; }
        const T& operator()() const { return userRegister; }
      };
    };
  };
} // namespace UserSQLdb
#endif
